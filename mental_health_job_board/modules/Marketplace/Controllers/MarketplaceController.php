<?php

namespace Modules\Marketplace\Controllers;

use App\Http\Controllers\Controller;
use Modules\Marketplace\Models\Marketplace;
use Illuminate\Http\Request;
use Modules\Marketplace\Models\MarketplaceCategory;
use Modules\Location\Models\Location;
use DB;

class MarketplaceController extends Controller
{
    protected $MarketplaceClass;
    protected $locationClass;
    /**
     * @var string
     */
    private $locationCategoryClass;
    private $defaultListCountSearch = 40;

    public function __construct()
    {
        $this->locationClass = Location::class;
    }

    public function callAction($method, $parameters)
    {
        if (!Marketplace::isEnable()) {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    public function index(Request $request)
    {
        $list = call_user_func([Marketplace::class,'search'], $request, $this->defaultListCountSearch);
        $data = [
            'request' => $request,
            'rows' => $list,
            'list_categories' => MarketplaceCategory::query()
                ->where('status', Marketplace::STATUS_PUBLISH)
                ->get()
                ->sortBy(static function(MarketplaceCategory $marketplace) {
                    return match (strtolower(substr($marketplace->name, 0, 1))) {
                        't' => 1,
                        'o' => 2,
                        'p' => 3,
                        default => 0
                    };
                })
                ->toTree(),
            'list_locations' => Location::where('status', 'publish')->limit(10)->get()->toTree(),
            'list_search' => $this->defaultListCountSearch,
            "filter" => $request->all(),
            "blank"              => 1,
            "seo_meta"           => Marketplace::getSeoMetaForPageList(),
            'page_title'=>__('All Announcements')
        ];

        return view('Marketplace::frontend.search', $data);
    }

    public function category($slug)
    {
        $category = MarketplaceCategory::query()->withDepth()->where('slug', $slug)->where('status', 'publish')->first();
        if (!$category) {
            abort(404);
        }
        $data = [
            'page' => [],
            'category' => $category,
            'translation' => $category->translateOrOrigin(app()->getLocale()),
            'page_title' => $category->name,
            'min_max_price' => Marketplace::getMinMaxPrice(),
        ];

        switch ($category->depth) {
            case 0:
                return view('Marketplace::frontend.category_lv1', $data);
                break;
            default:
                $filters = \request()->query();
                if ($category->depth == 1) {
                    $filters['cat2_id'] = $category->id;
                }
                if ($category->depth == 2) {
                    $filters['cat3_id'] = $category->id;
                }
                $data['rows'] = Marketplace::search($filters)->with(['author'])->paginate(setting_item('Marketplace_page_limit_item', 24));
                return view('Marketplace::frontend.category', $data);
                break;
        }
    }

    public function detail(Request $request, $slug)
    {
        $row = Marketplace::where('slug', $slug)->with(['location','translations', 'MarketplaceCategory'])->first();
        if ( empty($row)) {
            return redirect('/');
        }



        if ($row->status == 'draft' && (!auth()->check() || !is_admin() || auth()->user()->id !== $row->author_id)) {
            return redirect('/');
        }

        $translation = $row->translateOrOrigin(app()->getLocale());

        $gig_related = [];
        $category_id = $row->cat_id;
        if (!empty($category_id)) {
            $gig_related = Marketplace::with(['translations'])->where('cat_id', $category_id)->where("status","publish")->whereNotIn('id', [$row->id])->take(3)->get();
        }

        $review_list = $row->getReviewList();
        $data = [
            'row'          => $row,
            'translation'       => $translation,
            'gig_related' => $gig_related,
            'booking_data' => [],
            'review_list'  => $review_list,
            'seo_meta'  => $row->getSeoMetaWithTranslation(app()->getLocale(),$translation),
            'body_class'=>'is_single',
        ];

        return view('Marketplace::frontend.detail', $data);
    }

    public function MarketplaceSearchCount(Request $request)
    {
        return call_user_func([Marketplace::class, 'search'],  $request);
    }
}
