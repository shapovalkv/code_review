<?php
/**
 * Created by PhpStorm.
 * User: Admin
 * Date: 7/30/2019
 * Time: 1:56 PM
 */

namespace Modules\Marketplace\Admin;

use App\User;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Modules\AdminController;
use Modules\Company\Models\Company;
use Modules\Core\Events\CreatedServicesEvent;
use Modules\Core\Events\UpdatedServiceEvent;
use Modules\Marketplace\Models\Marketplace;
use Modules\Marketplace\Models\MarketplaceCategory;
use Modules\Marketplace\Models\MarketplaceTranslation;
use Modules\Core\Models\Attributes;
use Modules\Location\Models\Location;
use Modules\Location\Services\LocationService;

class MarketplaceController extends AdminController
{
    protected $Marketplace;
    protected $Marketplace_translation;
    protected $attributes;
    protected $location;

    public function __construct()
    {
        parent::__construct();
        if (!is_admin()) {
            $this->middleware('verified');
        }
        $this->setActiveMenu(route('marketplace.admin.index'));
        $this->Marketplace = Marketplace::class;
        $this->Marketplace_translation = MarketplaceTranslation::class;
        $this->attributes = Attributes::class;
        $this->location = Location::class;
    }

    public function callAction($method, $parameters)
    {
        if (!Marketplace::isEnable()) {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    public function index(Request $request)
    {
        $this->checkPermission('marketplace_manage');
        $query = $this->Marketplace::query();
        $query->orderBy('id', 'desc');
        if (!empty($s = $request->input('s'))) {
            $query->where('title', 'LIKE', '%' . $s . '%');
            $query->orderBy('title', 'asc');
        }

        if ($this->hasPermission('marketplace_manage_others')) {
            if (!empty($author = $request->input('vendor_id'))) {
                $query->where('author_id', $author);
            }
        } else {
            $query->where('author_id', Auth::id());
        }
        $data = [
            'rows' => $query->with(['author', 'MarketplaceCategory'])->paginate(20),
            'marketplace_manage_others' => $this->hasPermission('marketplace_manage_others'),
            'marketplace_location' => Location::where('status', 'publish')->inRandomOrder()->limit(10)->get()->toTree(),
            'breadcrumbs' => [
                [
                    'name' => __('Marketplaces'),
                    'url' => route('marketplace.admin.index')
                ],
                [
                    'name' => __('All'),
                    'class' => 'active'
                ],
            ],
            'page_title' => __("quipment Management")
        ];
        return view('Marketplace::admin.index', $data);
    }

    public function recovery(Request $request)
    {
        $this->checkPermission('marketplace_manage');
        $query = $this->Marketplace::onlyTrashed();
        $query->orderBy('id', 'desc');
        if (!empty($s = $request->input('s'))) {
            $query->where('title', 'LIKE', '%' . $s . '%');
            $query->orderBy('title', 'asc');
        }

        if ($this->hasPermission('marketplace_manage_others')) {
            if (!empty($author = $request->input('vendor_id'))) {
                $query->where('author_id', $author);
            }
        } else {
            $query->where('author_id', Auth::id());
        }
        $data = [
            'rows' => $query->with(['author'])->paginate(20),
            'marketplace_manage_others' => $this->hasPermission('marketplace_manage_others'),
            'recovery' => 1,
            'breadcrumbs' => [
                [
                    'name' => __('Marketplaces'),
                    'url' => route('marketplace.admin.index')
                ],
                [
                    'name' => __('Recovery'),
                    'class' => 'active'
                ],
            ],
            'page_title' => __("Recovery Marketplace Management")
        ];
        return view('Marketplace::admin.index', $data);
    }

    public function create(Request $request)
    {
        $this->checkPermission('marketplace_manage');

        if (!is_admin() && !auth()->user()->checkMarketplacePlan()) {
            return redirect(route('user.plan'));
        }
        $row = new $this->Marketplace();
        $row->fill([
            'status' => 'publish'
        ]);
        $data = [
            'row' => $row,
            'attributes' => $this->attributes::where('service', 'Marketplace')->get(),
            'marketplace_location' => Location::where('status', 'publish')->inRandomOrder()->limit(10)->get()->toTree(),
            'categories' => MarketplaceCategory::query()->where('status', 'publish')->get()->toTree(),
            'translation' => new $this->Marketplace_translation(),
            'locations' => Location::where('status', 'publish')->get()->toTree(),
            'breadcrumbs' => [
                [
                    'name' => __('Marketplaces'),
                    'url' => route('marketplace.admin.index')
                ],
                [
                    'name' => __('Add a Marketplace Post'),
                    'class' => 'active'
                ],
            ],
            'page_title' => __("Add new Announcement"),
            'marketplace_manage_others' => $this->hasPermission('marketplace_manage_others')
        ];
        return view('Marketplace::admin.detail', $data);
    }

    public function edit(Request $request, $id)
    {
        $this->checkPermission('marketplace_manage');
        $row = $this->Marketplace::find($id);
        if (empty($row)) {
            return redirect(route('marketplace.admin.index'));
        }
        $translation = $row->translateOrOrigin($request->query('lang'));
        if (!$this->hasPermission('marketplace_manage_others')) {
            if ($row->author_id != Auth::id()) {
                return redirect(route('marketplace.admin.index'));
            }
        }
        $data = [
            'row' => $row,
            'translation' => $translation,
            'categories' => MarketplaceCategory::query()->where('status', 'publish')->get(),
            'attributes' => $this->attributes::where('service', 'Marketplace')->get(),
            'marketplace_location' => Location::where('status', 'publish')->inRandomOrder()->limit(10)->get()->toTree(),
            'enable_multi_lang' => true,
            'tags' => $row->getTags(),
            'breadcrumbs' => [
                [
                    'name' => __('Marketplaces'),
                    'url' => route('marketplace.admin.index')
                ],
                [
                    'name' => __('Edit Marketplace'),
                    'class' => 'active'
                ],
            ],
            'page_title' => __("Edit: :name", ['name' => $row->title]),
            'marketplace_manage_others' => $this->hasPermission('marketplace_manage_others')
        ];
        return view('Marketplace::admin.detail', $data);
    }

    public function store(Request $request, $id)
    {
        /** @var Marketplace $row */
        if ($id > 0) {
            $this->checkPermission('marketplace_manage');
            $row = $this->Marketplace::find($id);
            if (empty($row)) {
                return redirect(route('marketplace.admin.index'));
            }

            if ($row->author_id != Auth::id() and !$this->hasPermission('marketplace_manage_others')) {
                return redirect(route('marketplace.admin.index'));
            }
        } else {
            $this->checkPermission('marketplace_manage');
            $row = new $this->Marketplace();
            $row->status = "draft";
            $row->is_featured = 0;
        }

        $rules = [
            'title' => 'required',
            'cat_id' => 'required',
            'expiration_date' => 'required'
        ];
        if (is_default_lang()) {
            $request->validate($rules, [
                'title.required' => __('Marketplace title is required'),
                'cat_id.required' => __("Category is required"),
            ]);
        }

        $dataKeys = [
            'title',
            'content',
            'status',
            'is_featured',
            'website',
            'company_id',

            'cat_id',
            'video_url',
            'image_id',
            'gallery',
            'map_lat',
            'map_lng',
            'map_zoom',
            'location_id',
            'author_id'
        ];

        $row->fillByAttr($dataKeys, $request->input());
        $row->announcement_date = Carbon::createFromFormat(get_date_format(), $request->input('announcement_date'));
        $row->announcement_status = json_encode($request->input('announcement_status'));
        $row->expiration_date = Carbon::createFromFormat(get_date_format(), $request->input('expiration_date'));
        if(empty($request->input('create_user') && empty($row->create_user))){
            $row->create_user = Auth::id();
        }

        if (empty($request->input('company_id')) && !is_admin()) {
            $user = User::with('company')->find(Auth::id());
            if (!empty($user->company)) {
                $row->company_id = $user->company->id;
                $row->create_user = $user->id;
                $row->author_id = $user->id;
            }
        } else {
            $row->create_user = (int)$row->author_id;
        }

        $res = $row->saveOriginOrTranslation($request->input('lang'), true);
        if ($res) {
            if (is_default_lang($request->query('lang'))) {
                $row->saveTag($request->input('tag_name'), $request->input('tag_ids'));
            }

            if ($id > 0) {
                event(new UpdatedServiceEvent($row));

                return back()->with('success', __('Your Marketplace post has been updated'));
            } else {
                event(new CreatedServicesEvent($row));

                return redirect(route('marketplace.admin.edit', $row->id))->with('success', __('Your Marketplace post has been created'));
            }
        }
    }

    public function bulkEdit(Request $request)
    {

        $ids = $request->input('ids');
        $action = $request->input('action');
        if (empty($ids) or !is_array($ids)) {
            return redirect()->back()->with('error', __('No items selected!'));
        }
        if (empty($action)) {
            return redirect()->back()->with('error', __('Please select an action!'));
        }

        switch ($action) {
            case "delete":
                foreach ($ids as $id) {
                    $query = $this->Marketplace::where("id", $id);
                    if (!$this->hasPermission('marketplace_manage_others')) {
                        $query->where("author_id", Auth::id());
                        $this->checkPermission('marketplace_manage');
                    }
                    $row = $query->first();
                    if (!empty($row)) {
                        $row->delete();
                        event(new UpdatedServiceEvent($row));

                    }
                }
                return redirect()->back()->with('success', __('Deleted success!'));
                break;
            case "permanently_delete":
                foreach ($ids as $id) {
                    $query = $this->Marketplace::where("id", $id);
                    if (!$this->hasPermission('marketplace_manage_others')) {
                        $query->where("author_id", Auth::id());
                        $this->checkPermission('marketplace_manage');
                    }
                    $row = $query->withTrashed()->first();
                    if ($row) {
                        $row->forceDelete();
                    }
                }
                return redirect()->back()->with('success', __('Permanently delete success!'));
                break;
            case "recovery":
                foreach ($ids as $id) {
                    $query = $this->Marketplace::withTrashed()->where("id", $id);
                    if (!$this->hasPermission('marketplace_manage_others')) {
                        $query->where("author_id", Auth::id());
                        $this->checkPermission('marketplace_manage');
                    }
                    $row = $query->first();
                    if (!empty($row)) {
                        $row->restore();
                        event(new UpdatedServiceEvent($row));

                    }
                }
                return redirect()->back()->with('success', __('Recovery success!'));
                break;
            case "clone":
                $this->checkPermission('marketplace_manage');
                foreach ($ids as $id) {
                    (new $this->Marketplace())->saveCloneByID($id);
                }
                return redirect()->back()->with('success', __('Clone success!'));
                break;
            default:
                // Change status
                foreach ($ids as $id) {
                    $query = $this->Marketplace::where("id", $id);
                    if (!$this->hasPermission('marketplace_manage_others')) {
                        $query->where("author_id", Auth::id());
                        $this->checkPermission('marketplace_manage');
                    }
                    $row = $query->first();
                    $row->status = $action;
                    $row->save();
                    event(new UpdatedServiceEvent($row));

                }
                return redirect()->back()->with('success', __('Update success!'));
                break;
        }


    }

    public function getForSelect2(Request $request)
    {
        $pre_selected = $request->query('pre_selected');
        $selected = $request->query('selected');
        if ($pre_selected && $selected) {
            if (is_array($selected)) {
                $items = $this->Marketplace::select('id', 'title as text')->whereIn('id', $selected)->take(50)->get();
                return response()->json([
                    'items' => $items
                ]);
            } else {
                $item = $this->Marketplace::find($selected);
            }
            if (empty($item)) {
                return response()->json([
                    'text' => ''
                ]);
            } else {
                return response()->json([
                    'text' => $item->name
                ]);
            }
        }
        $q = $request->query('q');
        $query = $this->Marketplace::select('id', 'title as text')->where("status", "publish");
        if ($q) {
            $query->where('name', 'like', '%' . $q . '%');
        }
        $res = $query->orderBy('id', 'desc')->limit(20)->get();
        return response()->json([
            'results' => $res
        ]);
    }
}
