<?php
/**
 * Created by PhpStorm.
 * User: Admin
 * Date: 7/30/2019
 * Time: 1:56 PM
 */

namespace Modules\Equipment\Admin;

use App\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Modules\AdminController;
use Modules\Core\Events\CreatedServicesEvent;
use Modules\Core\Events\UpdatedServiceEvent;
use Modules\Equipment\Models\Equipment;
use Modules\Equipment\Models\EquipmentCategory;
use Modules\Equipment\Models\EquipmentTranslation;
use Modules\Core\Models\Attributes;
use Modules\Location\Models\Location;
use Modules\Location\Services\LocationService;

class EquipmentController extends AdminController
{
    protected $equipment;
    protected $equipment_translation;
    protected $attributes;
    protected $location;

    public function __construct()
    {
        parent::__construct();
        if (!is_admin()) {
            $this->middleware('verified');
        }
        $this->setActiveMenu(route('equipment.admin.index'));
        $this->equipment = Equipment::class;
        $this->equipment_translation = EquipmentTranslation::class;
        $this->attributes = Attributes::class;
        $this->location = Location::class;
    }

    public function callAction($method, $parameters)
    {
        if (!Equipment::isEnable()) {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    public function index(Request $request)
    {
        $this->checkPermission('equipment_manage');
        $query = $this->equipment::query();
        $query->orderBy('id', 'desc');
        if (!empty($s = $request->input('s'))) {
            $query->where('title', 'LIKE', '%' . $s . '%');
            $query->orderBy('title', 'asc');
        }

        if ($this->hasPermission('equipment_manage_others')) {
            if (!empty($author = $request->input('vendor_id'))) {
                $query->where('author_id', $author);
            }
        } else {
            $query->where('author_id', Auth::id());
        }
        $data = [
            'rows' => $query->with(['author', 'equipmentCategory'])->paginate(20),
            'equipment_manage_others' => $this->hasPermission('equipment_manage_others'),
            'breadcrumbs' => [
                [
                    'name' => __('equipments'),
                    'url' => route('equipment.admin.index')
                ],
                [
                    'name' => __('All'),
                    'class' => 'active'
                ],
            ],
            'page_title' => __("quipment Management")
        ];
        return view('Equipment::admin.index', $data);
    }

    public function recovery(Request $request)
    {
        $this->checkPermission('equipment_manage');
        $query = $this->equipment::onlyTrashed();
        $query->orderBy('id', 'desc');
        if (!empty($s = $request->input('s'))) {
            $query->where('title', 'LIKE', '%' . $s . '%');
            $query->orderBy('title', 'asc');
        }

        if ($this->hasPermission('equipment_manage_others')) {
            if (!empty($author = $request->input('vendor_id'))) {
                $query->where('author_id', $author);
            }
        } else {
            $query->where('author_id', Auth::id());
        }
        $data = [
            'rows' => $query->with(['author'])->paginate(20),
            'equipment_manage_others' => $this->hasPermission('equipment_manage_others'),
            'recovery' => 1,
            'breadcrumbs' => [
                [
                    'name' => __('equipments'),
                    'url' => route('equipment.admin.index')
                ],
                [
                    'name' => __('Recovery'),
                    'class' => 'active'
                ],
            ],
            'page_title' => __("Recovery equipment Management")
        ];
        return view('Equipment::admin.index', $data);
    }

    public function create(Request $request)
    {
        $this->checkPermission('equipment_manage');

        if (!is_admin() && !auth()->user()->checkEquipmentPlan()) {
            return redirect(route('user.plan'));
        }
        $row = new $this->equipment();
        $row->fill([
            'status' => 'publish'
        ]);
        $data = [
            'row' => $row,
            'attributes' => $this->attributes::where('service', 'equipment')->get(),
            'categories' => EquipmentCategory::query()->get()->toTree(),
            'translation' => new $this->equipment_translation(),
            'locations' => Location::where('status', 'publish')->get()->toTree(),
            'breadcrumbs' => [
                [
                    'name' => __('equipments'),
                    'url' => route('equipment.admin.index')
                ],
                [
                    'name' => __('Add equipment'),
                    'class' => 'active'
                ],
            ],
            'page_title' => __("Add new equipment"),
            'equipment_manage_others' => $this->hasPermission('equipment_manage_others')
        ];
        return view('Equipment::admin.detail', $data);
    }

    public function edit(Request $request, $id)
    {
        $this->checkPermission('equipment_manage');
        $row = $this->equipment::find($id);
        if (empty($row)) {
            return redirect(route('equipment.admin.index'));
        }
        $translation = $row->translateOrOrigin($request->query('lang'));
        if (!$this->hasPermission('equipment_manage_others')) {
            if ($row->author_id != Auth::id()) {
                return redirect(route('equipment.admin.index'));
            }
        }
        $data = [
            'row' => $row,
            'translation' => $translation,
            'categories' => EquipmentCategory::get(),
            'attributes' => $this->attributes::where('service', 'equipment')->get(),
            'enable_multi_lang' => true,
            'tags' => $row->getTags(),
            'breadcrumbs' => [
                [
                    'name' => __('equipments'),
                    'url' => route('equipment.admin.index')
                ],
                [
                    'name' => __('Edit equipment'),
                    'class' => 'active'
                ],
            ],
            'page_title' => __("Edit: :name", ['name' => $row->title]),
            'equipment_manage_others' => $this->hasPermission('equipment_manage_others')
        ];
        return view('Equipment::admin.detail', $data);
    }

    public function store(Request $request, LocationService $locationService, $id)
    {
        if ($id > 0) {
            $this->checkPermission('equipment_manage');
            $row = $this->equipment::find($id);
            if (empty($row)) {
                return redirect(route('equipment.admin.index'));
            }

            if ($row->author_id != Auth::id() and !$this->hasPermission('equipment_manage_others')) {
                return redirect(route('equipment.admin.index'));
            }
        } else {
            $this->checkPermission('equipment_manage');
            $row = new $this->equipment();
            $row->status = "draft";
            $row->is_featured = 0;
        }

        $rules = [
            'title' => 'required',
            'cat_id' => 'required',
            'price' => 'required',
        ];
        if (is_default_lang()) {
            $request->validate($rules, [
                'title.required' => __('equipment title is required'),
                'cat_id.required' => __("Category is required"),
                'price.required' => __("Price is required"),
            ]);
        }

        $dataKeys = [
            'title',
            'content',
            'status',
            'is_featured',
            'cat_id',

            'video_url',
            'faqs',
            'image_id',
            'gallery',
            'price',

            'map_lat',
            'map_lng',
            'map_zoom',
            'location_id',

            'packages',
            'package_compare',
            'requirements',
            'author_id',
        ];

        $row->fillByAttr($dataKeys, $request->input());
        $row->location_id = $locationService->store($request);
        if (!$this->hasPermission('equipment_manage_others')) {
            $row->author_id = Auth::id();
        }
        if ($request->input('slug')) {
            $row->slug = $request->input('slug');
        }
        if (!empty($row->author_id)){
            $author = User::findOrFail($row->author_id);
            $row->company_id = $author->role->code !== 'employee' ? $author->company->id :null;
        }

        if ($packages = $request->input('packages') and !empty($packages[0]['delivery_time'])) {
            $row->basic_delivery_time = $packages[0]['delivery_time'];
        } else {
            $row->basic_delivery_time = 0;
        }

        $res = $row->saveOriginOrTranslation($request->input('lang'), true);
        if ($res) {
            if (is_default_lang($request->query('lang'))) {
                $row->saveTag($request->input('tag_name'), $request->input('tag_ids'));
            }

            if ($id > 0) {
                event(new UpdatedServiceEvent($row));

                return back()->with('success', __('Your equipment post has been updated'));
            } else {
                event(new CreatedServicesEvent($row));

                return redirect(route('equipment.admin.edit', $row->id))->with('success', __('Your equipment post has been created'));
            }
        }
    }

    public function bulkEdit(Request $request)
    {

        $ids = $request->input('ids');
        $action = $request->input('action');
        if (empty($ids) or !is_array($ids)) {
            return redirect()->back()->with('error', __('No items selected!'));
        }
        if (empty($action)) {
            return redirect()->back()->with('error', __('Please select an action!'));
        }

        switch ($action) {
            case "delete":
                foreach ($ids as $id) {
                    $query = $this->equipment::where("id", $id);
                    if (!$this->hasPermission('equipment_manage_others')) {
                        $query->where("author_id", Auth::id());
                        $this->checkPermission('equipment_manage');
                    }
                    $row = $query->first();
                    if (!empty($row)) {
                        $row->delete();
                        event(new UpdatedServiceEvent($row));

                    }
                }
                return redirect()->back()->with('success', __('Deleted success!'));
                break;
            case "permanently_delete":
                foreach ($ids as $id) {
                    $query = $this->equipment::where("id", $id);
                    if (!$this->hasPermission('equipment_manage_others')) {
                        $query->where("author_id", Auth::id());
                        $this->checkPermission('equipment_manage');
                    }
                    $row = $query->withTrashed()->first();
                    if ($row) {
                        $row->forceDelete();
                    }
                }
                return redirect()->back()->with('success', __('Permanently delete success!'));
                break;
            case "recovery":
                foreach ($ids as $id) {
                    $query = $this->equipment::withTrashed()->where("id", $id);
                    if (!$this->hasPermission('equipment_manage_others')) {
                        $query->where("author_id", Auth::id());
                        $this->checkPermission('equipment_manage');
                    }
                    $row = $query->first();
                    if (!empty($row)) {
                        $row->restore();
                        event(new UpdatedServiceEvent($row));

                    }
                }
                return redirect()->back()->with('success', __('Recovery success!'));
                break;
            case "clone":
                $this->checkPermission('equipment_manage');
                foreach ($ids as $id) {
                    (new $this->equipment())->saveCloneByID($id);
                }
                return redirect()->back()->with('success', __('Clone success!'));
                break;
            default:
                // Change status
                foreach ($ids as $id) {
                    $query = $this->equipment::where("id", $id);
                    if (!$this->hasPermission('equipment_manage_others')) {
                        $query->where("author_id", Auth::id());
                        $this->checkPermission('equipment_manage');
                    }
                    $row = $query->first();
                    $row->status = $action;
                    $row->save();
                    event(new UpdatedServiceEvent($row));

                }
                return redirect()->back()->with('success', __('Update success!'));
                break;
        }


    }

    public function getForSelect2(Request $request)
    {
        $pre_selected = $request->query('pre_selected');
        $selected = $request->query('selected');
        if ($pre_selected && $selected) {
            if (is_array($selected)) {
                $items = $this->equipment::select('id', 'title as text')->whereIn('id', $selected)->take(50)->get();
                return response()->json([
                    'items' => $items
                ]);
            } else {
                $item = $this->equipment::find($selected);
            }
            if (empty($item)) {
                return response()->json([
                    'text' => ''
                ]);
            } else {
                return response()->json([
                    'text' => $item->name
                ]);
            }
        }
        $q = $request->query('q');
        $query = $this->equipment::select('id', 'title as text')->where("status", "publish");
        if ($q) {
            $query->where('name', 'like', '%' . $q . '%');
        }
        $res = $query->orderBy('id', 'desc')->limit(20)->get();
        return response()->json([
            'results' => $res
        ]);
    }
}
