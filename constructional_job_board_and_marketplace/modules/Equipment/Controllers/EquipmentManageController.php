<?php

namespace Modules\Equipment\Controllers;

use App\Services\BasicFilterService;
use App\User;
use Carbon\Carbon;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\App;
use Illuminate\Support\Facades\Auth;
use Modules\Core\Events\CreatedServicesEvent;
use Modules\Core\Events\UpdatedServiceEvent;
use Modules\Equipment\Exports\EquipmentExport;
use Modules\Equipment\Requests\BulkEquipmentRequest;
use Modules\Equipment\Requests\UpdateEquipmentRequest;
use Modules\Equipment\Resources\CategoryResource;
use Modules\Equipment\Resources\EquipmentManageResource;
use Modules\FrontendController;
use Modules\Equipment\Models\Equipment;
use Modules\Core\Models\Attributes;
use Modules\Equipment\Models\EquipmentCategory;
use Modules\Equipment\Models\EquipmentTranslation;
use Modules\Location\Models\Location;
use Modules\Location\Services\LocationService;
use Modules\Order\Helpers\CartManager;
use Modules\User\Models\Plan;
use Modules\User\Models\PlanFeature;

class EquipmentManageController extends FrontendController
{
    protected $equipmentClass;

    public function __construct()
    {
        parent::__construct();
        $this->equipmentClass = Equipment::class;
    }

    public function callAction($method, $parameters)
    {
        if (!Equipment::isEnable()) {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    public function index(Request $request, BasicFilterService $basicFilterService)
    {
        $this->checkPermission('equipment_manage');

        $authorId = Auth::user()->id ?? '';

        $equipments = call_user_func([Equipment::class, 'search'], $request, $authorId);

        $data = [
            'rows' => EquipmentManageResource::collection($equipments),
            'pagination' => [
                'total' => $equipments->total(),
                'last_page' => $equipments->lastPage(),
                'per_page' => $equipments->perPage(),
                'current_page' => $equipments->currentPage(),
            ],
            'filters' => [
                'category' => [
                    'items' => CategoryResource::collection(EquipmentCategory::where('status', 'publish')->withCount('openEquipment')->get()->sortBy('name')->toTree()),
                    'values' => $request->category,
                ],
                'active' => $basicFilterService->active($request->active, $this->equipmentClass, $authorId),
                'sponsored' => $basicFilterService->sponsored($request->sponsored),
                'keywords' => $basicFilterService->popularSearchKeywords($request->keywords, App::make($this->equipmentClass)->type),
                'location' => $basicFilterService->popularSearchLocation($request->location, App::make($this->equipmentClass)->type),
                'orderby' => $basicFilterService->orderby($request->orderby),
                'limit' => $basicFilterService->limit($request->limit),
            ],
            'menu_active' => 'seller_equipments',
            'page_title' => __("All equipment"),
        ];

        return view('Equipment::frontend.seller.manageEquipment.index', $data);
    }

    public function edit(Request $request, $id)
    {
        $this->checkPermission('equipment_manage');
        $row = Equipment::query()->where('author_id', Auth::id())->find($id);

        if (empty($row)) {
            return redirect(route('seller.all.equipments'));
        }

        $translation = $row->translateOrOrigin($request->query('lang'));

        $data = [
            'row' => $row,
            'translation' => $translation,
            'attributes' => Attributes::where('service', 'equipment')->get(),
            'locations' => Location::where('status', 'publish')->get()->toTree(),
            'enable_multi_lang' => true,
            'tags' => $row->getTags(),
            'page_title' => __("Edit equipment"),
            'menu_active' => 'seller_equipments',
            'is_user_page' => true
        ];

        return view('Equipment::frontend.seller.manageEquipment.edit', $data);
    }

    public function create(Request $request)
    {
        $this->checkPermission('equipment_manage');
        $row = new Equipment();
        $row->fill([
            'status' => 'publish'
        ]);
        $data = [
            'row' => $row,
            'attributes' => Attributes::where('service', 'equipment')->get(),
            'categories' => EquipmentCategory::query()->get()->sortBy('name')->toTree(),
            'translation' => new EquipmentTranslation(),
            'locations' => Location::where('status', 'publish')->get()->toTree(),
            'page_title' => __("Add new equipment"),
            'is_user_page' => true
        ];
        return view('Equipment::frontend.seller.manageEquipment.edit', $data);
    }

    public function store(Request $request, LocationService $locationService, $id)
    {
        $user = Auth::user();
        if ($id > 0) {
            $this->checkPermission('equipment_manage');
            $row = Equipment::query()->where('author_id', $user->id)->find($id);
            if (empty($row)) {
                return redirect(route('seller.all.equipments'));
            }
        } else {
            $this->checkPermission('equipment_manage');
            $row = new Equipment();
            $row->status = "draft";
            $row->is_featured = 0;
        }

        $rules = [
            'title' => 'required',
            'cat_id' => 'required',
            'price' => 'required|numeric|digits_between:1,10000000',
            'map_location' => 'required',
        ];
        if (is_default_lang()) {
            $request->validate($rules, [
                'title.required' => __('equipment title is required'),
                'cat_id.required' => __("Category is required"),
                'price.required' => __("Price is required"),
                'map_location.required' => __('Please select location from drop down or select place on the map'),
            ]);
        }

        $dataKeys = [
            'title',
            'content',
            'cat_id',

            'video_url',
            'faqs',
            'image_id',
            'gallery',

            'location_id',
            'price',

            'packages',
            'package_compare',
            'requirements',
        ];
        $row->fillByAttr($dataKeys, $request->input());
        $row->location_id = $locationService->store($request);
        $row->expiration_date = Carbon::now()->addDays(Equipment::BASIC_EXPIRATION_DAYS);
        $row->author_id = $user->id;

        if ($request->input('slug')) {
            $row->slug = $request->input('slug');
        }

        if (!empty($row->author_id)) {
            $company = User::find($row->author_id)->company;
            $row->company_id = $company ? $company->id : null;
        }

        if ($packages = $request->input('packages') and !empty($packages[0]['delivery_time'])) {
            $row->basic_delivery_time = $packages[0]['delivery_time'];
        } else {
            $row->basic_delivery_time = 0;
        }

        $res = $row->createSeoAndSave([
            'seo_title' => 'constructional_job_board_and_marketplace | ' . ($user->company ? $user->company->name : $user->name) . ' | ' . $row->title,
            'seo_desc' => mb_strimwidth($row->content, 0, 130, '...'),
            'seo_keywords' => null //TODO Create auto generating seo keywords with SEO team requirements
        ]);

        if ($res) {
            if (is_default_lang($request->query('lang'))) {
                $row->saveTag($request->input('tag_name'), $request->input('tag_ids'));
            }

            if ($id > 0) {
                event(new UpdatedServiceEvent($row));

                return back()->with('success', __('Your equipment post has been updated'));
            } else {
                event(new CreatedServicesEvent($row));
                return redirect(route('seller.choose.equipment.plan', ['equipment' => $row->id]))->with('success', __('Your Job post has been created'));
            }
        }
    }

    public function choosePlan(Equipment $equipment)
    {
        $this->checkPermission('equipment_manage');

        return view("User::frontend.plan.choose-equipment-plan", [
            'page' => [],
            'equipment' => $equipment,
            'user' => auth()->user(),
            'feature' => PlanFeature::EQUIPMENT_SPONSORED
        ]);
    }

    public function storePlan(Request $request, Equipment $equipment)
    {
        $this->checkPermission('equipment_manage');
        $user = Auth::user();
        if ($equipment->create_user !== $user->id) {
            return abort(403);
        }
        $data = $request->validate([
            'action' => 'required'
        ]);
        if ($data['action'] === 'free') {
            $equipment->publish();
            return redirect()->route('seller.all.equipments')->with('success', __('Your Equipment post has been posted'));
        } elseif ($data['action'] === 'promote') {
            CartManager::clear();
            CartManager::add(
                Plan::where(['plan_type' => Plan::TYPE_ONE_TIME, 'title' => Plan::PLAN_EQUIPMENT_SPONSORED])->first(),
                '', 1, 0, ['action' => 'sponsored', 'model' => Equipment::class, 'model_id' => $equipment->id]
            );
            return redirect()->route('checkout', ['redirectTo' => route('seller.all.equipments')]);
        }
        return back();
    }

    public function delete(Equipment $equipment, Request $request)
    {
        $this->checkPermission('equipment_manage');
        $user = Auth::user();

        if (empty($equipment)) {
            return redirect(route('seller.all.equipments'));
        }

        $equipment->delete();
        $user->useFeature(PlanFeature::EQUIPMENT_CREATE, 1);
        if ($equipment->is_featured) {
            $user->useFeature(PlanFeature::EQUIPMENT_SPONSORED, 1);
        }
        event(new UpdatedServiceEvent($equipment));

        return redirect()->back()->with('success', __('Deleted success!'));

    }

    public function update(Equipment $equipment, UpdateEquipmentRequest $request)
    {
        $this->checkPermission('equipment_manage');

        $data = $request->validated();

        if ($equipment->author_id !== Auth::user()->id) {
            return response()->json(['status' => 'error', 'message' => __('Only author can made changes!')]);
        }

        switch ($data['action']) {
            case 'update_status':
                $equipment->status = $data['status'];
                $equipment->save();
                return response()->json(['status' => 'success', 'message' => __('Status changed!')]);
            case 'sponsored':
                // todo Update sponsored functionality after subscription will be implemented
                $equipment->is_featured = true;
                $equipment->expiration_date = Carbon::now()->addDays(Equipment::BASIC_EXPIRATION_DAYS);
                $equipment->save();
                return response()->json(['status' => 'success', 'message' => __('Equipment sponsored!')]);
            case 'renew':
                $equipment->expiration_date = Carbon::now()->addDays(Equipment::BASIC_EXPIRATION_DAYS);
                $equipment->status = "publish";
                $equipment->save();
                return response()->json(['status' => 'success', 'message' => __('Job renewed!')]);
            default:
                return response()->json(['status' => 'error', 'message' => __('Action name error!')]);
        }
    }

    public function bulk(BulkEquipmentRequest $request)
    {
        $this->checkPermission('equipment_manage');
        $data = $request->validated();

        switch ($request['action']) {
            case BulkEquipmentRequest::DELETE:
                Equipment::query()
                    ->when(is_candidate(), fn($query) => $query->where(function ($query) use ($data) {
                        $query->where('create_user', '=', Auth::id())
                            ->whereNull('company_id');
                    }))
                    ->when(is_employer(), fn($query) => $query->where(function ($query) use ($data) {
                        $query->where('company_id', '=', Auth::user()->company->id ?? '');
                    }))
                    ->whereIn("id", $data['ids'])
                    ->delete();
                break;
            case BulkEquipmentRequest::DRAFT:
            case BulkEquipmentRequest::PUBLISH:
                Equipment::query()
                    ->when(is_candidate(), fn($query) => $query->where(function ($query) use ($data) {
                        $query->where('create_user', '=', Auth::id())
                            ->whereNull('company_id');
                    }))
                    ->when(is_employer(), fn($query) => $query->where(function ($query) use ($data) {
                        $query->where('company_id', '=', Auth::user()->company->id ?? '');
                    }))
                    ->whereIn("id", $data['ids'])
                    ->update(['status' => $data['action']]);
        }


        return response()->json(['status' => 'success', 'message' => __('Update success!')]);
    }

    public function equipmentExport()
    {
        $this->checkPermission('equipment_manage');

        return (new EquipmentExport())->download('equipment-' . date('M-d-Y') . '.xlsx');
    }
}
